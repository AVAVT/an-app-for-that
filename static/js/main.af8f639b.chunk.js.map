{"version":3,"sources":["Main.js","QRCode/QRCode.js","FoursomeScheduler/foursome.js","FoursomeScheduler/FoursomePlayerInput.js","FoursomeScheduler/FoursomeTournamentView.js","FoursomeScheduler/FoursomeScheduler.js","App.js","serviceWorker.js","index.js"],"names":["Main","className","Helmet","Row","Col","to","React","PureComponent","QRCodeApp","state","showQRScanner","qrCode","handleScan","data","setState","handleError","err","console","error","md","Form","FormGroup","InputGroup","InputGroupAddon","addonType","Button","color","title","onClick","icon","faCamera","ref","type","value","this","onChange","e","target","refs","select","document","execCommand","faCopy","size","Modal","isOpen","toggle","ModalBody","delay","onError","onScan","style","width","ModalFooter","matchupPresets","require","shuffle","knuthShuffle","schedule","players","playerData","map","player","index","id","name","score","shuffledPlayerIds","matchData","length","round","tables","table","presetIndex","matchScore","playerCounts","FoursomePlayerInput","playerCount","playerNames","Array","from","composePlayerCountSetter","number","i","startGame","props","onStart","renderPlayerInput","sm","lg","key","Input","placeholder","index2","xs","ButtonGroup","count","FoursomeTournamentView","composeInputHandler","roundIndex","tableIndex","playerIndex","Number","onScoreChanged","renderRound","roundData","tableData","renderTable","xl","log","Label","maxWidth","flex","whiteSpace","overflow","textOverflow","defaultValue","sortedPlayers","sort","a","b","position","borderRight","Table","striped","borderless","FoursomeScheduler","gameData","save","resetGame","localStorage","removeItem","setItem","JSON","stringify","setPlayerTableScore","roundIndex2","tableIndex2","playerIndex2","playerDataFromMatchData","result","savedData","parse","getItem","App","path","exact","component","QRCode","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af8f639b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { Row, Col } from 'reactstrap';\n\nclass Main extends React.PureComponent {\n\n  render() {\n    return (\n      <div className=\"container\" >\n        <Helmet>\n          <title>Home - An App for that</title>\n        </Helmet>\n\n        <h1>An App for that</h1>\n\n        <Row>\n          <Col>\n            <ul>\n              <li>\n                <Link to=\"/qrcode\">QRCode Scanner/Creator</Link>\n              </li>\n              <li>\n                <Link to=\"/foursome\">Foursome Round-robin Tournament Scheduler</Link>\n              </li>\n            </ul>\n          </Col>\n        </Row>\n      </div >\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport QRCode from 'qrcode.react';\nimport QrReader from 'react-qr-reader';\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCamera, faCopy } from '@fortawesome/free-solid-svg-icons';\n\nimport { Form, FormGroup, InputGroup, InputGroupAddon, Button, Modal, ModalBody, ModalFooter, Row, Col } from 'reactstrap';\n\nclass QRCodeApp extends React.PureComponent {\n  state = {\n    showQRScanner: false,\n    qrCode: ''\n  }\n\n  handleScan = data => {\n    if (data) {\n      this.setState({\n        qrCode: data,\n        showQRScanner: false\n      })\n    }\n  }\n  handleError = err => {\n    console.error(err)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Helmet>\n          <title>QRCode Scanner/Creator - An App for that</title>\n        </Helmet>\n\n        <h1>QRCode Scanner/Creator</h1>\n        <Link to=\"/\">Home</Link>\n\n        <Row className=\"mt-5\">\n          <Col md=\"4 m-auto\">\n            <Form>\n              <FormGroup>\n                <InputGroup>\n                  <InputGroupAddon addonType=\"prepend\">\n                    <Button color=\"primary\" title=\"Scan\" onClick={() => this.setState({ showQRScanner: true })} >\n                      <FontAwesomeIcon icon={faCamera} />\n                    </Button>\n                  </InputGroupAddon>\n                  <input ref=\"qr-input\" type=\"text\" className=\"form-control\" value={this.state.qrCode} onChange={(e) => this.setState({ qrCode: e.target.value })} />\n                  {\n                    this.state.qrCode && (\n                      <InputGroupAddon addonType=\"append\">\n                        <Button\n                          title=\"Copy Code\"\n                          color=\"primary\"\n                          onClick={() => {\n                            this.refs['qr-input'].select();\n                            document.execCommand('copy');\n                            return false;\n                          }} >\n                          <FontAwesomeIcon icon={faCopy} />\n                        </Button>\n                      </InputGroupAddon>\n                    )\n                  }\n                </InputGroup>\n              </FormGroup>\n              <QRCode value={this.state.qrCode} size={256} />\n            </Form>\n          </Col>\n        </Row>\n\n        <Modal isOpen={this.state.showQRScanner} toggle={() => this.setState({ showQRScanner: false })}>\n          <ModalBody>\n            <QrReader\n              delay={300}\n              onError={this.handleError}\n              onScan={this.handleScan}\n              style={{ width: '100%' }}\n            />\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.setState({ showQRScanner: false })}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default QRCodeApp;","const matchupPresets = require('./foursome-schedule-presets.json');\nconst shuffle = require('knuth-shuffle').knuthShuffle;\n\nexport const schedule = (players) => {\n  const playerData = players.map((player, index) => ({\n    id: index,\n    name: player,\n    score: 0\n  }));\n  const shuffledPlayerIds = shuffle([...playerData.map(data => data.id)]);\n  const preset = matchupPresets[players.length];\n\n  const matchData = preset.map((round) => ({\n    tables: round.map((table) => ({\n      players: table.map(presetIndex => ({\n        id: shuffledPlayerIds[presetIndex],\n        matchScore: 0\n      }))\n    }))\n  }));\n\n  return {\n    playerData,\n    matchData\n  }\n}","import React from 'react';\nimport {\n  Row,\n  Col,\n  ButtonGroup,\n  Button,\n  Input,\n  FormGroup\n} from 'reactstrap';\n\nconst playerCounts = [16/*, 20, 24, 28, 32*/];\n\nclass FoursomePlayerInput extends React.PureComponent {\n  state = {\n    playerCount: 16,\n    playerNames: Array.from({ length: 16 }).map(() => '')\n  }\n\n  composePlayerCountSetter = number => () => this.setState({\n    playerCount: number,\n    playerNames: Array.from({ length: number }).map((i, index) => this.state.playerNames[index] || '')\n  });\n\n  startGame = () => this.props.onStart(this.state.playerNames);\n\n  renderPlayerInput = (value, index) => (\n    <Col sm=\"6\" md=\"4\" lg=\"3\" key={index}>\n      <FormGroup>\n        <Input\n          className=\"form-control\"\n          value={value}\n          placeholder={`Name for player ${index + 1}...`}\n          onChange={(e) => this.setState({\n            playerNames: this.state.playerNames.map((name, index2) => index === index2 ? e.target.value : name)\n          })}\n        />\n      </FormGroup>\n    </Col>\n  )\n\n  render() {\n    return (\n      <>\n        <Row className=\"mt-5 mb-3\">\n          <Col xs=\"12\">\n            <div>Number of players:</div>\n            <ButtonGroup className=\"mb-3\">\n              {playerCounts.map(count => (\n                <Button\n                  key={count}\n                  color={this.state.playerCount === count ? 'primary' : 'secondary'}\n                  onClick={this.composePlayerCountSetter(count)}\n                >\n                  {count}\n                </Button>\n              ))}\n            </ButtonGroup>\n            {(this.state.playerCount === 16 || this.state.playerCount === 28) && (\n              <div className=\"text-muted\">Note: Perfect solution available (meaning each player can play against all opponents).</div>\n            )}\n          </Col>\n        </Row>\n        <hr />\n        <Row className=\"pb-5\">\n          <Col xs=\"12\">\n            <p>Enter player names. Leave field empty if there're not enough players.</p>\n          </Col>\n\n          {this.state.playerNames.map(this.renderPlayerInput)}\n\n          <Col xs=\"12\" className=\"mt-2\">\n            <Button color=\"primary\" onClick={this.startGame}>Start</Button>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default FoursomePlayerInput;","import React from 'react';\nimport { Table, Input, Label, Row, Col } from 'reactstrap';\nimport './foursome.css';\n\nclass FoursomeTournamentView extends React.PureComponent {\n\n  composeInputHandler = (roundIndex, tableIndex, playerIndex) => e => {\n    const number = Number(e.target.value);\n    this.props.onScoreChanged(roundIndex, tableIndex, playerIndex, number);\n  }\n  renderRound = (roundData, index) => (\n    <Row key={index} className=\"mb-5\">\n      <Col xs=\"12\">\n        <h3>Round {index + 1}</h3>\n      </Col>\n      {roundData.tables.map((tableData, tableIndex) => this.renderTable(tableData, tableIndex, index))}\n    </Row>\n  )\n\n  renderTable = (tableData, tableIndex, roundIndex) => (\n    <Col sm=\"6\" xl=\"3\" key={tableIndex}>\n      <div key={tableIndex} className=\"table_view\">\n        <h4 className=\"table_view_header bg-primary text-white\">Round {roundIndex + 1} - Table {tableIndex + 1}</h4>\n        <div className=\"table_view_body mt-2\">\n          {tableData.players.map(({ id, matchScore }, playerIndex) => {\n            console.log(matchScore);\n            return (\n              <div>\n                <Label key={id} style={{ maxWidth: '100%', flex: '1 1 auto', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                  <Input\n                    type=\"number\"\n                    className=\"form-control d-inline-block\"\n                    defaultValue={matchScore || 0}\n                    placeholder=\"Score\"\n                    style={{ width: 70 }}\n                    onChange={this.composeInputHandler(roundIndex, tableIndex, playerIndex)}\n                  />\n                  {` ${this.props.playerData[id].name}`}\n                </Label>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </Col>\n  )\n\n  render() {\n    const sortedPlayers = [...this.props.playerData].sort((a, b) => b.score - a.score);\n    return (\n      <Row style={{ position: 'relative' }}>\n        <Col md=\"4\" lg=\"3\" style={{ borderRight: '1px solid #dedede' }}>\n          <h3>Player Ranking</h3>\n          <Table striped borderless>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Name</th>\n                <th>Score</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedPlayers.map((player, index) => (\n                <tr key={player.id}>\n                  <td>{index + 1}</td>\n                  <td>{player.name}</td>\n                  <td>{player.score}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Col>\n        <Col md=\"8\" lg=\"9\">\n          {this.props.matchData.map(this.renderRound)}\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default FoursomeTournamentView;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { Button } from 'reactstrap';\n\nimport { schedule } from './foursome';\nimport FoursomePlayerInput from './FoursomePlayerInput';\nimport FoursomeTournamentView from './FoursomeTournamentView';\n\nclass FoursomeScheduler extends React.PureComponent {\n  state = {\n    gameData: null\n  }\n\n  componentDidMount() {\n    const savedData = JSON.parse(localStorage.getItem('foursome-tournament'));\n    if (savedData) this.setState({ gameData: savedData })\n  }\n\n  startGame = players => this.setState({\n    gameData: schedule(players)\n  }, this.save)\n\n  resetGame = () => {\n    localStorage.removeItem('foursome-tournament');\n    this.setState({ gameData: null });\n  }\n\n  save = () => {\n    localStorage.setItem('foursome-tournament', JSON.stringify(this.state.gameData));\n  }\n\n  setPlayerTableScore = (roundIndex, tableIndex, playerIndex, score) => {\n    const matchData = this.state.gameData.matchData.map(\n      (round, roundIndex2) => roundIndex !== roundIndex2\n        ? round\n        : {\n          tables: round.tables.map(\n            (table, tableIndex2) => tableIndex !== tableIndex2\n              ? table\n              : {\n                players: table.players.map(\n                  (player, playerIndex2) => playerIndex !== playerIndex2\n                    ? player\n                    : {\n                      ...player,\n                      matchScore: score\n                    }\n                )\n              }\n          )\n        }\n    );\n\n    const playerData = this.playerDataFromMatchData(this.state.gameData.playerData, matchData);\n    this.setState({\n      gameData: {\n        playerData,\n        matchData\n      }\n    }, this.save);\n  }\n\n  playerDataFromMatchData = (playerData, matchData) => {\n    const result = playerData.map(player => ({\n      ...player,\n      score: 0\n    }));\n\n    for (let round of matchData) {\n      for (let table of round.tables) {\n        for (let player of table.players) {\n          result[player.id].score += player.matchScore\n        }\n      }\n    }\n\n    return result;\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Helmet>\n          <title>Foursome Scheduler - An App for that</title>\n        </Helmet>\n\n        <h1>Foursome Scheduler</h1>\n        <div className=\"d-flex justify-content-between\">\n          <Link to=\"/\">Home</Link>\n          {\n            this.state.gameData &&\n            <Button color=\"outline-danger\" onClick={this.resetGame}>New Tournament</Button>\n          }\n        </div>\n        {\n          this.state.gameData\n            ? <FoursomeTournamentView\n              matchData={this.state.gameData.matchData}\n              playerData={this.state.gameData.playerData}\n              onScoreChanged={this.setPlayerTableScore}\n            />\n            : <FoursomePlayerInput onStart={this.startGame} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default FoursomeScheduler;","import React from 'react';\nimport './App.css';\n\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Main from './Main';\nimport QRCode from './QRCode/QRCode';\nimport FoursomeScheduler from './FoursomeScheduler/FoursomeScheduler';\n\nclass App extends React.PureComponent {\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route path=\"/\" exact component={Main} />\n          <Route path=\"/qrcode\" component={QRCode} />\n          <Route path=\"/foursome\" component={FoursomeScheduler} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}