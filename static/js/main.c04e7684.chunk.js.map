{"version":3,"sources":["Main.js","QRCode/QRCode.js","App.js","serviceWorker.js","index.js"],"names":["Main","className","Helmet","Row","Col","to","React","PureComponent","QRCodeApp","state","showQRScanner","qrCode","handleScan","data","setState","handleError","err","console","error","md","Form","FormGroup","InputGroup","InputGroupAddon","addonType","Button","color","title","onClick","icon","faCamera","ref","type","value","this","onChange","e","target","refs","select","document","execCommand","faCopy","size","Modal","isOpen","toggle","ModalBody","delay","onError","onScan","style","width","ModalFooter","App","path","exact","component","QRCode","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TA8BeA,E,iLAtBX,OACE,yBAAKC,UAAU,aACb,kBAACC,EAAA,OAAD,KACE,0DAGF,+CAEA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,WAAT,kC,GAfGC,IAAMC,e,kHCqFVC,E,2MA/EbC,MAAQ,CACNC,eAAe,EACfC,OAAQ,I,EAGVC,WAAa,SAAAC,GACPA,GACF,EAAKC,SAAS,CACZH,OAAQE,EACRH,eAAe,K,EAIrBK,YAAc,SAAAC,GACZC,QAAQC,MAAMF,I,wEAGN,IAAD,OACP,OACE,yBAAKf,UAAU,aACb,kBAACC,EAAA,OAAD,KACE,2EAGF,qDACA,kBAAC,IAAD,CAAMG,GAAG,KAAT,QAEA,kBAACF,EAAA,EAAD,CAAKF,UAAU,QACb,kBAACG,EAAA,EAAD,CAAKe,GAAG,YACN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,MAAM,OAAOC,QAAS,kBAAM,EAAKd,SAAS,CAAEJ,eAAe,MACjF,kBAAC,IAAD,CAAiBmB,KAAMC,QAG3B,2BAAOC,IAAI,WAAWC,KAAK,OAAO/B,UAAU,eAAegC,MAAOC,KAAKzB,MAAME,OAAQwB,SAAU,SAACC,GAAD,OAAO,EAAKtB,SAAS,CAAEH,OAAQyB,EAAEC,OAAOJ,WAErIC,KAAKzB,MAAME,QACT,kBAACY,EAAA,EAAD,CAAiBC,UAAU,UACzB,kBAACC,EAAA,EAAD,CACEE,MAAM,YACND,MAAM,UACNE,QAAS,WAGP,OAFA,EAAKU,KAAK,YAAYC,SACtBC,SAASC,YAAY,SACd,IAET,kBAAC,IAAD,CAAiBZ,KAAMa,UAOnC,kBAAC,IAAD,CAAQT,MAAOC,KAAKzB,MAAME,OAAQgC,KAAM,SAK9C,kBAACC,EAAA,EAAD,CAAOC,OAAQX,KAAKzB,MAAMC,cAAeoC,OAAQ,kBAAM,EAAKhC,SAAS,CAAEJ,eAAe,MACpF,kBAACqC,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,MAAO,IACPC,QAASf,KAAKnB,YACdmC,OAAQhB,KAAKtB,WACbuC,MAAO,CAAEC,MAAO,WAGpB,kBAACC,EAAA,EAAD,KACE,kBAAC5B,EAAA,EAAD,CAAQC,MAAM,UAAUE,QAAS,kBAAM,EAAKd,SAAS,CAAEJ,eAAe,MAAtE,iB,GAxEYJ,IAAMC,eCWf+C,E,iLAXX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWzD,IACjC,kBAAC,IAAD,CAAOuD,KAAK,UAAUE,UAAWC,U,GAPzBpD,IAAMC,eCKJoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c04e7684.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { Row, Col } from 'reactstrap';\n\nclass Main extends React.PureComponent {\n\n  render() {\n    return (\n      <div className=\"container\" >\n        <Helmet>\n          <title>Home - An App for that</title>\n        </Helmet>\n\n        <h1>An App for that</h1>\n\n        <Row>\n          <Col>\n            <ul>\n              <li>\n                <Link to=\"/qrcode\">QRCode Scanner/Reader</Link>\n              </li>\n            </ul>\n          </Col>\n        </Row>\n      </div >\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport QRCode from 'qrcode.react';\nimport QrReader from 'react-qr-reader';\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCamera, faCopy } from '@fortawesome/free-solid-svg-icons';\n\nimport { Form, FormGroup, InputGroup, InputGroupAddon, Button, Modal, ModalBody, ModalFooter, Row, Col } from 'reactstrap';\n\nclass QRCodeApp extends React.PureComponent {\n  state = {\n    showQRScanner: false,\n    qrCode: ''\n  }\n\n  handleScan = data => {\n    if (data) {\n      this.setState({\n        qrCode: data,\n        showQRScanner: false\n      })\n    }\n  }\n  handleError = err => {\n    console.error(err)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Helmet>\n          <title>QRCode Scanner/Reader - An App for that</title>\n        </Helmet>\n\n        <h1>QRCode Scanner/Reader</h1>\n        <Link to=\"/\">Home</Link>\n\n        <Row className=\"mt-5\">\n          <Col md=\"4 m-auto\">\n            <Form>\n              <FormGroup>\n                <InputGroup>\n                  <InputGroupAddon addonType=\"prepend\">\n                    <Button color=\"primary\" title=\"Scan\" onClick={() => this.setState({ showQRScanner: true })} >\n                      <FontAwesomeIcon icon={faCamera} />\n                    </Button>\n                  </InputGroupAddon>\n                  <input ref=\"qr-input\" type=\"text\" className=\"form-control\" value={this.state.qrCode} onChange={(e) => this.setState({ qrCode: e.target.value })} />\n                  {\n                    this.state.qrCode && (\n                      <InputGroupAddon addonType=\"append\">\n                        <Button\n                          title=\"Copy Code\"\n                          color=\"primary\"\n                          onClick={() => {\n                            this.refs['qr-input'].select();\n                            document.execCommand('copy');\n                            return false;\n                          }} >\n                          <FontAwesomeIcon icon={faCopy} />\n                        </Button>\n                      </InputGroupAddon>\n                    )\n                  }\n                </InputGroup>\n              </FormGroup>\n              <QRCode value={this.state.qrCode} size={256} />\n            </Form>\n          </Col>\n        </Row>\n\n        <Modal isOpen={this.state.showQRScanner} toggle={() => this.setState({ showQRScanner: false })}>\n          <ModalBody>\n            <QrReader\n              delay={300}\n              onError={this.handleError}\n              onScan={this.handleScan}\n              style={{ width: '100%' }}\n            />\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.setState({ showQRScanner: false })}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default QRCodeApp;","import React from 'react';\nimport './App.css';\n\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Main from './Main';\nimport QRCode from './QRCode/QRCode';\n\nclass App extends React.PureComponent {\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route path=\"/\" exact component={Main} />\n          <Route path=\"/qrcode\" component={QRCode} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}